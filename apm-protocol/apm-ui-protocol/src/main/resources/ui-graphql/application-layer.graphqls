# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ApplicationNode represents this node is under monitoring by agent.
type ApplicationNode implements Node {
    id: ID!
    name: String!
    type: String
    # Success rate of all incoming requests.
    # Max value is 10000.
    # 2 Digits after floating point in UI, need to division by 100. 10000 -> 100.00
    sla: Int!
    # The number of incoming calls
    cpm: Long!
    # Unit: millisecond
    avgResponseTime: Long!
    # ref: http://www.apdex.org/
    # Max value is 100
    # 2 Digits after floating point in UI, need to division by 100. 100 -> 1.00
    apdex: Int!
    # Whether the application alerts?
    # Default value is false.
    isAlarm: Boolean!
    # The number of servers in the application code
    numOfServer: Int!
    # The number of servers alerting
    numOfServerAlarm: Int!
    # The number of services alerting
    numOfServiceAlarm: Int!
}

# The conjectural node generated by exit span
type ConjecturalNode implements Node {
    id: ID!
    name: String!
    type: String
}

type Application {
    id: ID!
    name: String!
    # The number of servers in the application code
    numOfServer: Int!
}

extend type Query {
  getAllApplication(duration: Duration!): [Application!]!
  getApplicationTopology(applicationId: ID!, duration: Duration!): Topology
  getSlowService(applicationId: ID!, duration: Duration!, topN: Int!): [ServiceMetric!]!
  getServerThroughput(applicationId: ID!, duration: Duration!, topN: Int!): [AppServerInfo!]!
}
